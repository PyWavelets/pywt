name: Build Wheels and Release
on:
  push:
    tags:
      - "v*"
      - "buildwheels*"
    branches:
      # Runs on every merge to main to upload .dev0 wheels to anaconda.org
      - main
      - v1.**
  # Make it possible to upload wheels manually if needed (for anaconda.org only, not PyPI)
  workflow_dispatch:
    inputs:
      push_wheels:
        description: >
          Push wheels to Anaconda if "true". Default is "false". Warning: this will overwrite existing wheels.
        required: false
        default: "false"
  # Upload wheels to anaconda.org on a schedule
  schedule:
    # Run at 0300 hours on days 3 and 17 of the month
    - cron: "0 3 3,17 * *"
env:
  CIBW_BUILD_VERBOSITY: 2
  CIBW_TEST_REQUIRES: pytest
  CIBW_TEST_COMMAND: pytest --pyargs pywt -m "not slow"
  CIBW_ENVIRONMENT: PIP_PREFER_BINARY=1

jobs:
  build_linux_x86_64_wheels:
    name: Build ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cibw_python: ["cp311", "cp312", "cp313", "cp313t", "cp314", "cp314t"]
        cibw_arch: ["x86_64"]
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        name: Install Python
        with:
          python-version: "3.12"

      - name: Build the wheel
        uses: pypa/cibuildwheel@9e4e50bd76b3190f55304387e333f6234823ea9b # v3.1.2
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}-*
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_ENABLE: cpython-freethreading
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels_linux_${{ matrix.cibw_arch }}_${{ matrix.cibw_python }}
          path: ./dist/*.whl
          if-no-files-found: error

  build_linux_aarch64_wheels:
    name: Build ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-arm]
        cibw_python: ["cp311", "cp312", "cp313", "cp313t", "cp314", "cp314t"]
        cibw_arch: ["aarch64"]
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        name: Install Python
        with:
          python-version: "3.12"

      - name: Build the wheel
        uses: pypa/cibuildwheel@9e4e50bd76b3190f55304387e333f6234823ea9b # v3.1.2
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}-*
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_ENABLE: cpython-freethreading
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels_linux_${{ matrix.cibw_arch }}_${{ matrix.cibw_python }}
          path: ./dist/*.whl

  build_macos_wheels:
    name: Build ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is the last runner that supports Intel (x86_64) architecture
        os: [macos-13, macos-14]
        cibw_python: ["cp311", "cp312", "cp313", "cp313t", "cp314", "cp314t"]
        cibw_arch: ["x86_64", "arm64"]
        exclude:
          - os: macos-14
            cibw_arch: "x86_64"
          - os: macos-13
            cibw_arch: "arm64"
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        name: Install Python
        with:
          python-version: "3.12"

      - name: Build wheels for CPython (macOS) (x86_64)
        if: matrix.cibw_arch == 'x86_64'
        uses: pypa/cibuildwheel@9e4e50bd76b3190f55304387e333f6234823ea9b # v3.1.2
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}-*
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}
          CIBW_ENABLE: cpython-freethreading

      - name: Build wheels for CPython (macOS) (arm64)
        if: matrix.cibw_arch == 'arm64'
        uses: pypa/cibuildwheel@9e4e50bd76b3190f55304387e333f6234823ea9b # v3.1.2
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}-*
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}
          CIBW_ENABLE: cpython-freethreading

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels_macos_${{ matrix.cibw_arch }}_${{ matrix.cibw_python }}
          path: ./dist/*.whl
          if-no-files-found: error

  build_windows_wheels:
    name: Build ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        cibw_arch: ["AMD64", "x86"]
        cibw_python: ["cp311", "cp312", "cp313", "cp313t", "cp314", "cp314t"]
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        name: Install Python
        with:
          python-version: "3.12"

      - name: Setup MSVC (32-bit)
        if: matrix.cibw_arch == 'x86'
        uses: bus1/cabuild/action/msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d # v1
        with:
          architecture: x86

      - name: Setup MSVC (64-bit)
        if: matrix.cibw_arch == 'AMD64'
        uses: bus1/cabuild/action/msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d # v1
        with:
          architecture: x64

      - name: Build Windows wheels for CPython
        uses: pypa/cibuildwheel@9e4e50bd76b3190f55304387e333f6234823ea9b # v3.1.2
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}-*
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_arch }}
          CIBW_ENABLE: cpython-freethreading

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels_windows_${{ matrix.cibw_arch }}_${{ matrix.cibw_python }}
          path: ./dist/*.whl
          if-no-files-found: error

  deploy_pypi:
    name: Release (PyPI)
    needs:
      [
        build_linux_x86_64_wheels,
        build_linux_aarch64_wheels,
        build_macos_wheels,
        build_windows_wheels,
      ]
    # Run only on tags pushed to the repository
    if: github.repository == 'PyWavelets/pywt' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        name: Install Python
        with:
          python-version: "3.12"

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
          pip install cython numpy build

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        id: download
        with:
          pattern: "wheels_*"
          path: ./dist
          merge-multiple: true

      - name: Publish the source distribution on PyPI
        run: |
          PYWT_VERSION=$(git describe --tags)
          python -m build --sdist
          ls -la ${{ github.workspace }}/dist
          # We prefer to release wheels before source because otherwise there is a
          # small window during which users who pip install pywt will require compilation.
          twine upload ${{ github.workspace }}/dist/*.whl
          twine upload ${{ github.workspace }}/dist/pywavelets-${PYWT_VERSION:1}.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}

      - name: Github release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

  deploy_anaconda:
    name: Release (Anaconda)
    needs:
      [
        build_linux_x86_64_wheels,
        build_linux_aarch64_wheels,
        build_macos_wheels,
        build_windows_wheels,
      ]
    # Run only on pushes to the main branch, on schedule, or when triggered manually
    if: >-
      github.repository == 'PyWavelets/pywt' &&
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.push_wheels == 'true') ||
      (github.event_name == 'schedule')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        id: download
        with:
          pattern: "wheels_*"
          path: dist/
          merge-multiple: true

      - name: Push to Anaconda PyPI index
        uses: scientific-python/upload-nightly-action@b36e8c0c10dbcfd2e05bf95f17ef8c14fd708dbf # v0.6.2
        with:
          artifacts_path: dist/
          anaconda_nightly_upload_token: ${{ secrets.ANACONDA_ORG_UPLOAD_TOKEN }}
