name: Tests

on:
  push:
    branches:
      - v1.**
  pull_request:
    branches:
      - main
      - v1.**

concurrency:
  # avoid duplicate runs on both pushes and PRs
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Coloured output for GitHub Actions
  FORCE_COLOR: 3
  # Some common environment variables for both GNU/Linux and macOS jobs
  MPLBACKEND: Agg
  CYTHON_TRACE: 1
  CYTHONSPEC: cython
  NUMPY_MIN: numpy==1.26.4
  CYTHON_MIN: cython==3.1.3

jobs:
  test_pywavelets_linux:
    name: ${{ matrix.runs-on }}-cp${{ matrix.python-version }}-${{ matrix.OPTIONS_NAME }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest] # Arm runner tested separately, see below
        python-version: ["3.12", "3.14"]
        MINIMUM_REQUIREMENTS: [0]
        USE_SDIST: [0]
        REFGUIDE_CHECK: [1]
        PIP_FLAGS: [""]
        OPTIONS_NAME: ["default"]
        include:
          # Linux arm64
          - runs-on: ubuntu-22.04-arm
            python-version: "3.14"
          # Linux amd64
          - runs-on: ubuntu-latest
            python-version: "3.12"
            MINIMUM_REQUIREMENTS: 1
            OPTIONS_NAME: "minimum-req"
          - runs-on: ubuntu-latest
            python-version: "3.12"
          - runs-on: ubuntu-latest
            python-version: "3.14"
            USE_SDIST: 1
            OPTIONS_NAME: "install-from-sdist"
          - runs-on: ubuntu-latest
            python-version: "3.14"
            PIP_FLAGS: "--pre"
            OPTIONS_NAME: "pre-releases"
          - runs-on: ubuntu-latest
            python-version: "3.14"
            OPTIONS_NAME: "editable-install"
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.2
      - uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.5.0
        with:
          python-version: ${{ matrix.python-version}}
          allow-prereleases: true

      - name: Build package
        env:
          VERSION: ${{ matrix.python-version }}
          MINIMUM_REQUIREMENTS: ${{ matrix.MINIMUM_REQUIREMENTS }}
          PIP_FLAGS: ${{ matrix.PIP_FLAGS }}
          USE_SDIST: ${{ matrix.USE_SDIST }}
          REFGUIDE_CHECK: ${{ matrix.REFGUIDE_CHECK }}
          OPTIONS_NAME: ${{ matrix.OPTIONS_NAME }}
        run: |
          uname -a
          df -h
          ulimit -a
          # ccache -s
          which python
          python --version
          # sudo apt-get install libatlas-base-dev
          pip install --upgrade pip build
          # Set numpy version first, other packages link against it
          if [ "${MINIMUM_REQUIREMENTS}" == "1" ]; then
              pip install ${CYTHON_MIN}
              pip install ${NUMPY_MIN}
          else
              pip install ${PIP_FLAGS} cython
              pip install ${PIP_FLAGS} numpy
          fi
          pip install ${PIP_FLAGS} matplotlib pytest

            set -o pipefail
            if [ "${USE_SDIST}" == "1" ]; then
                python -m build --sdist
                pip install dist/pyw*.tar.gz -v
            elif [ "${REFGUIDE_CHECK}" == "1" ]; then
                pip install sphinx numpydoc scipy-doctest
                pip install . -v
            else
                pip install . -v
            fi

          if [ "${OPTIONS_NAME}" == "editable-install" ]; then
              pip install meson-python>=0.16.0 matplotlib pytest ninja
              pip install -e . --no-build-isolation
          fi

      - name: Run tests
        env:
          USE_SDIST: ${{ matrix.USE_SDIST }}
          REFGUIDE_CHECK: ${{ matrix.REFGUIDE_CHECK }}
          OPTIONS_NAME: ${{ matrix.OPTIONS_NAME }}
        run: |
          set -o pipefail
          # Move out of source directory to avoid finding local pywt
          pushd demo
          if [ "${USE_SDIST}" == "1" ]; then
              pytest --pyargs pywt
              python ../pywt/tests/test_doc.py
          elif [ "${REFGUIDE_CHECK}" == "1" ]; then
              # doctest docstrings
              pytest --doctest-modules --pyargs pywt -v  --doctest-collect=api
              # Run Sphinx HTML docs builder, converting warnings to errors
              # Move back out of demo/ to root directory
              cd ..
              pip install -r util/readthedocs/requirements.txt
              sphinx-build -b html -W --keep-going -d _build/doctrees doc/source doc/build
          else
              pytest --pyargs pywt
          fi
          popd

  test_pywavelets_linux_free_threaded:
    name: linux-cp${{ matrix.python-version }}-default
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13t", "3.14t"]
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.2
      - uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.5.0
        with:
          python-version: ${{ matrix.python-version}}

      - name: Build package
        run: |
          pip install --upgrade pip build
          pip install cython numpy meson-python ninja pytest
          pip install . -v --no-build-isolation

      - name: Run tests
        run: |
          # Move out of source directory to avoid finding local pywt
          cd demo
          pytest --pyargs pywt

  test_pywavelets_macos:
    name: macos-cp${{ matrix.python-version }}-${{ matrix.OPTIONS_NAME }}
    runs-on: macos-latest
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.14"]
        MINIMUM_REQUIREMENTS: [0]
        USE_SDIST: [0]
        REFGUIDE_CHECK: [0]
        PIP_FLAGS: [""]
        OPTIONS_NAME: ["default"]
        include:
          - python-version: "3.12"
            MINIMUM_REQUIREMENTS: 1
            OPTIONS_NAME: "osx-minimum-req"
          - python-version: "3.14"
            PIP_FLAGS: "--pre"
            OPTIONS_NAME: "pre-releases"

    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.2
      - uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.5.0
        with:
          python-version: ${{ matrix.python-version}}
          allow-prereleases: true

      - name: Build package
        env:
          VERSION: ${{ matrix.python-version }}
          MINIMUM_REQUIREMENTS: ${{ matrix.MINIMUM_REQUIREMENTS }}
          PIP_FLAGS: ${{ matrix.PIP_FLAGS }}
          USE_SDIST: ${{ matrix.USE_SDIST }}
          REFGUIDE_CHECK: ${{ matrix.REFGUIDE_CHECK }}
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
        run: |
          uname -a
          df -h
          ulimit -a
          which python
          python --version
          pip install --upgrade pip build
          # Set numpy version first, other packages link against it
          if [ "${MINIMUM_REQUIREMENTS}" == "1" ]; then
              pip install ${CYTHON_MIN} ${NUMPY_MIN}
          else
              pip install ${PIP_FLAGS} cython numpy
          fi
          pip install ${PIP_FLAGS} matplotlib pytest

            set -o pipefail
            if [ "${USE_SDIST}" == "1" ]; then
                python -m build --sdist
                pip install pywavelets* -v
            elif [ "${REFGUIDE_CHECK}" == "1" ]; then
                pip install sphinx numpydoc scipy-doctest
                pip install . -v
            else
                pip install . -v
            fi

      - name: Run tests
        env:
          PIP_FLAGS: ${{ matrix.PIP_FLAGS }}
          USE_SDIST: ${{ matrix.USE_SDIST }}
          REFGUIDE_CHECK: ${{ matrix.REFGUIDE_CHECK }}
        run: |
          # Move out of source directory to avoid finding local pywt
          pushd demo
          if [ "${USE_SDIST}" == "1" ]; then
              pytest --pyargs pywt
              python ../pywt/tests/test_doc.py
          elif [ "${REFGUIDE_CHECK}" == "1" ]; then
              # doctests docstrings
              pytest --doctest-modules --doctest-only-doctests=true --pyargs pywt -v  --doctest-collect=api
              pytest --doctest-modules --doctest-only-doctests=true --pyargs pywt.data -v
          else
              pytest --pyargs pywt
          fi
          popd

  build_stable_abi_wheel:
    name: build-abi3-${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.2
      - uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.5.0
        with:
          python-version: "3.12"

      - name: Build package
        run: |
          pip install build
          python -m build --wheel -Csetup-args="--vsenv" -Csetup-args="-Dpython.allow_limited_api=true"

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: ./dist/*.whl
          name: ${{ matrix.platform }}-abi3-wheel

  test_stable_abi_wheel:
    needs: build_stable_abi_wheel
    name: test-abi3-${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/setup-python@2e3e4b15a884dc73a63f962bff250a855150a234 # v5.5.0
        with:
          python-version: "3.14"

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ matrix.platform }}-abi3-wheel

      - name: Check downloaded artifact
        run: |
          ls

      - name: Install downloaded wheel
        shell: bash
        run: |
          pip install pywavelets-*-abi3-*.whl

      - name: Install test dependencies
        run: |
          pip install pytest numpy matplotlib

      - name: Run tests
        run: |
          pytest --pyargs pywt
